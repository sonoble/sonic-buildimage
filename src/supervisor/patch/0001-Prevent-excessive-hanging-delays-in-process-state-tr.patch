From bac496af4c2051b3c15038e06533f9094b1c3604 Mon Sep 17 00:00:00 2001
From: Joe LeVeque <jolevequ@microsoft.com>
Date: Tue, 16 Jan 2018 20:42:13 +0000
Subject: [PATCH 1/2] Prevent excessive hanging/delays in process state
 transitions if the system time rolls backward

---
 supervisor/process.py | 32 ++++++++++++++++++++++++++++++++
 1 file changed, 32 insertions(+)

diff --git a/supervisor/process.py b/supervisor/process.py
index f9ddcd9..216372f 100644
--- a/supervisor/process.py
+++ b/supervisor/process.py
@@ -357,6 +357,12 @@ class Subprocess:
         """ Log a 'waiting for x to stop' message with throttling. """
         if self.state == ProcessStates.STOPPING:
             now = time.time()
+
+            # If the system clock has moved backward, reset
+            # self.laststopreport to current system time
+            if now < self.laststopreport:
+                self.laststopreport = now;
+
             if now > (self.laststopreport + 2): # every 2 seconds
                 self.config.options.logger.info(
                     'waiting for %s to stop' % self.config.name)
@@ -604,12 +610,27 @@ class Subprocess:
                     # STOPPED -> STARTING
                     self.spawn()
             elif state == ProcessStates.BACKOFF:
+                if self.delay > 0 and now < self.delay - self.backoff:
+                    # The system clock appears to have moved backward
+                    # Reset self.delay accordingly
+                    self.delay = now + self.backoff
+
                 if self.backoff <= self.config.startretries:
                     if now > self.delay:
                         # BACKOFF -> STARTING
                         self.spawn()
 
         if state == ProcessStates.STARTING:
+            if now < self.laststart:
+                # The system clock appears to have moved backward
+                # Reset self.laststart to current system time
+                self.laststart = now;
+
+            if self.delay > 0 and now < self.delay - self.config.startsecs:
+                # The system clock appears to have moved backward
+                # Reset self.delay accordingly
+                self.delay = now + self.config.startsecs
+
             if now - self.laststart > self.config.startsecs:
                 # STARTING -> RUNNING if the proc has started
                 # successfully and it has stayed up for at least
@@ -633,6 +654,11 @@ class Subprocess:
                 logger.info('gave up: %s %s' % (self.config.name, msg))
 
         elif state == ProcessStates.STOPPING:
+            if self.delay > 0 and now < self.delay - self.config.stopwaitsecs:
+                # The system clock appears to have moved backward
+                # Reset self.delay accordingly
+                self.delay = now + self.config.stopwaitsecs
+
             time_left = self.delay - now
             if time_left <= 0:
                 # kill processes which are taking too long to stop with a final
@@ -805,6 +831,12 @@ class EventListenerPool(ProcessGroupBase):
         if dispatch_capable:
             if self.dispatch_throttle:
                 now = time.time()
+
+                # If the system clock has moved backward, reset
+                # self.last_dispatch to current system time
+                if now < self.last_dispatch:
+                    self.last_dispatch = now;
+
                 if now - self.last_dispatch < self.dispatch_throttle:
                     return
             self.dispatch()
-- 
2.1.4

