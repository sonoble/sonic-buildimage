From 3a42b497716375c9347b51c3a28c5e91e7cd4cf4 Mon Sep 17 00:00:00 2001
From: Joe LeVeque <jolevequ@microsoft.com>
Date: Tue, 12 Dec 2017 00:49:09 +0000
Subject: [PATCH 3/3] Support for loading port alias map file to replace port
 name with alias in circuit id

---
 relay/dhcrelay.c | 106 ++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 105 insertions(+), 1 deletion(-)

diff --git a/relay/dhcrelay.c b/relay/dhcrelay.c
index 8458ea9..15f0acf 100644
--- a/relay/dhcrelay.c
+++ b/relay/dhcrelay.c
@@ -122,6 +122,14 @@ static void setup_streams(void);
 char *dhcrelay_sub_id = NULL;
 #endif
 
+struct interface_name_alias_tuple {
+    char if_name[IFNAMSIZ];
+    char if_alias[IFNAMSIZ];
+};
+
+static struct interface_name_alias_tuple *g_interface_name_alias_map = NULL;
+static size_t g_interface_name_alias_map_size = 0;
+
 static void do_relay4(struct interface_info *, struct dhcp_packet *,
 	              unsigned int, unsigned int, struct iaddr,
 		      struct hardware *);
@@ -134,6 +142,10 @@ static int strip_relay_agent_options(struct interface_info *,
 				     struct interface_info **,
 				     struct dhcp_packet *, unsigned);
 
+static int load_interface_alias_map(const char *port_alias_map_file_path);
+static int get_interface_alias_by_name(const char *if_name, char *if_alias_out);
+static void free_interface_alias_map(void);
+
 static const char copyright[] =
 "Copyright 2004-2015 Internet Systems Consortium.";
 static const char arr[] = "All rights reserved.";
@@ -147,7 +159,7 @@ static const char url[] =
 "\n" \
 "  %%%%  A single %%\n" \
 "  %%h  Hostname of device\n" \
-"  %%p  Name of interface that generated the request\n" \
+"  %%p  Alias of interface that generated the request\n" \
 "  %%P  Hardware address of interface that generated the request\n" \
 "  %%C  Client hardware address\n" \
 "  %%I  DHCP relay agent IP Address\n" \
@@ -158,10 +170,12 @@ static const char url[] =
 "                     [-A <length>] [-c <hops>] [-p <port>]\n" \
 "                     [-pf <pid-file>] [--no-pid]\n"\
 "                     [-m append|replace|forward|discard]\n" \
+"                     [--name-alias-map-file <name-alias-map-file>]\n" \
 "                     [-i interface0 [ ... -i interfaceN]\n" \
 "                     server0 [ ... serverN]\n\n" \
 "       dhcrelay -6   [-d] [-q] [-I] [-c <hops>] [-p <port>]\n" \
 "                     [-pf <pid-file>] [--no-pid]\n" \
+"                     [--name-alias-map-file <name-alias-map-file>]\n" \
 "                     [-s <subscriber-id>]\n" \
 "                     -l lower0 [ ... -l lowerN]\n" \
 "                     -u upper0 [ ... -u upperN]\n" \
@@ -405,6 +419,11 @@ main(int argc, char **argv) {
 			no_dhcrelay_pid = ISC_TRUE;
 		} else if (!strcmp(argv[i], "--no-pid")) {
 			no_pid_file = ISC_TRUE;
+        } else if (!strcmp(argv[i], "--name-alias-map-file")) {
+            if (++i == argc)
+                usage();
+            if (load_interface_alias_map(argv[i]) != 0)
+                log_fatal("Failed to load interface name-alias map.");
 		} else if (!strcmp(argv[i], "--version")) {
 			log_info("isc-dhcrelay-%s", PACKAGE_VERSION);
 			exit(0);
@@ -624,6 +643,8 @@ main(int argc, char **argv) {
 	dispatch();
 
 	/* In fact dispatch() never returns. */
+    free_interface_alias_map();
+
 	return (0);
 }
 
@@ -1040,6 +1061,7 @@ format_relay_agent_rfc3046_msg(const struct interface_info *ip, struct dhcp_pack
                     */
                     if (packet->htype && !packet->giaddr.s_addr) {
                         int ret = 0, vlanid = 0;
+                        char ifalias[IFNAMSIZ] = { 0 };
 
                         ret = _bridgefdbquery(print_hw_addr(packet->htype, packet->hlen, packet->chaddr),
                                               ifname,
@@ -1056,6 +1078,18 @@ format_relay_agent_rfc3046_msg(const struct interface_info *ip, struct dhcp_pack
                             strncpy(ifname, ip->name, IFNAMSIZ);
                         }
 
+                        // Attempt to translate SONiC interface name to vendor alias
+                        ret = get_interface_alias_by_name(ifname, ifalias);
+                        if (ret < 0) {
+                            //log_debug("Failed to retrieve alias for interface name '%s'. Defaulting to interface name.", ifname);
+                        }
+                        else {
+                            //log_debug("Mapped interface name '%s' to alias '%s'. Adding as option 82 interface alias for MAC Address %s",
+                            //          ifname, ifalias, print_hw_addr (packet->htype, packet->hlen, packet->chaddr));
+
+                            strncpy(ifname, ifalias, IFNAMSIZ);
+                        }
+
                         str = ifname;
                     }
                 break;
@@ -1922,3 +1956,73 @@ dhcp_set_control_state(control_object_state_t oldstate,
 
 	exit(0);
 }
+
+#define MAX_PORT_CONFIG_LINE_LEN 1024
+
+// Allocates and loads global map g_interface_name_alias_map
+// Also sets global g_interface_name_alias_map_size
+static int
+load_interface_alias_map(const char *port_alias_map_file_path) {
+    int i = 0;
+    FILE *fp = NULL;
+    char line[MAX_PORT_CONFIG_LINE_LEN] = { 0 };
+
+    fp = fopen(port_alias_map_file_path,"r");
+    if (fp == NULL) {
+        log_error("Unable to open %s", port_alias_map_file_path);
+        return -1;
+    }
+
+    g_interface_name_alias_map_size = 0;
+
+    // Count the number of interfaces listed in the file
+    while (fgets(line, sizeof(line), fp)) {
+        g_interface_name_alias_map_size++;
+    }
+
+    // Allocate our map accordingly
+    g_interface_name_alias_map = ((struct interface_name_alias_tuple *)
+            dmalloc((sizeof(struct interface_name_alias_tuple) * g_interface_name_alias_map_size),
+                     MDL));
+
+    // Reset file position indicator to beginning of file
+    fseek(fp, 0, SEEK_SET);
+
+     // Every line should contain exactly one name-alias pair
+    while (fgets(line, sizeof(line), fp)) {
+         // Each line should read as "<name><whitespace><alias>"
+         sscanf(line, "%s %s", g_interface_name_alias_map[i].if_name, g_interface_name_alias_map[i].if_alias);
+        i++;
+    }
+
+    fclose(fp);
+
+    log_info("Loaded %d interface name-alias mappings", i);
+
+    return 0;
+}
+
+// Locates alias for port named if_name, copies alias into if_alias_out, up to a
+// max of IFNAMSIZ bytes.
+// Returns 0 on success, -1 on failure
+static int
+get_interface_alias_by_name(const char *if_name, char *if_alias_out) {
+    int i = 0;
+
+    for (i = 0; i < g_interface_name_alias_map_size; i++) {
+        if (strncmp(if_name, g_interface_name_alias_map[i].if_name, IFNAMSIZ) == 0) {
+            strncpy(if_alias_out, g_interface_name_alias_map[i].if_alias, IFNAMSIZ);
+            return 0;
+        }
+    }
+
+    return -1;
+}
+
+// Frees global map g_interface_name_alias_map
+// Sets g_interface_name_alias_map_size to 0
+static void
+free_interface_alias_map(void) {
+    free(g_interface_name_alias_map);
+    g_interface_name_alias_map_size = 0;
+}
-- 
2.1.4

